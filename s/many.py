#!/usr/bin/env python3
"""
SonarQube Quality Metrics Extractor

Script pour extraire les m√©triques de qualit√© des projets SonarQube.
Supporte √©galement la classification des projets selon leur int√©gration SonarQube.
"""

import argparse
import json
import csv
import sys
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sonar_qube_service import SonarQubeService, QualityMetrics, ProjectClassification, SonarQubeConfig


def print_stats(metrics):
    """Affiche les statistiques des m√©triques."""
    total = len(metrics)
    passed = len([m for m in metrics if m.quality_gate_status == 'OK'])
    failed = len([m for m in metrics if m.quality_gate_status == 'ERROR'])
    warned = len([m for m in metrics if m.quality_gate_status == 'WARN'])
    
    print(f"\nüìä Statistiques Nexus:")
    print(f"Total des projets: {total}")
    print(f"‚úÖ Pass√©s: {passed}")
    print(f"‚ùå √âchecs: {failed}")
    print(f"‚ö†Ô∏è  Avertissements: {warned}")
    print(f"üìà Taux de r√©ussite: {(passed/total*100):.1f}%" if total > 0 else "N/A")


def export_to_csv_incremental(service, projects, filename=None):
    """Exporte les m√©triques vers CSV de mani√®re incr√©mentale avec barre de progression."""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"nexus_quality_metrics_{timestamp}.csv"
    
    headers = [
        'Projet', 'Cl√©', 'Quality Gate', 'Couverture', 'Duplication',
        'Maintenabilit√©', 'Fiabilit√©', 'S√©curit√©', 'Vuln√©rabilit√©s',
        'Bugs', 'Code Smells', 'Dette technique', 'Lignes de code',
        'Derni√®re analyse'
    ]
    
    total_projects = len(projects)
    processed = 0
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile, delimiter=';')
        writer.writerow(headers)
        
        # Parall√©lisation avec ThreadPoolExecutor
        with ThreadPoolExecutor(max_workers=10) as executor:
            with tqdm(total=total_projects, desc="Export CSV", 
                     bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:
                
                future_to_project = {
                    executor.submit(service.get_project_quality_metrics_safe, project): project 
                    for project in projects
                }
                
                for future in future_to_project:
                    try:
                        metrics = future.result(timeout=60)
                        if metrics:
                            row = [
                                metrics.project_name,
                                metrics.project_key,
                                metrics.quality_gate_status,
                                metrics.coverage or '',
                                metrics.duplicated_lines_density or '',
                                SonarQubeService.get_rating_label(metrics.maintainability_rating),
                                SonarQubeService.get_rating_label(metrics.reliability_rating),
                                SonarQubeService.get_rating_label(metrics.security_rating),
                                metrics.vulnerabilities or '',
                                metrics.bugs or '',
                                metrics.code_smells or '',
                                SonarQubeService.format_technical_debt(metrics.technical_debt),
                                metrics.lines_of_code or '',
                                metrics.last_analysis_date or ''
                            ]
                            writer.writerow(row)
                            csvfile.flush()  # Force l'√©criture imm√©diate
                            processed += 1
                            pbar.set_postfix({"Sauv√©s": processed, "Derni√®re": metrics.project_name[:15] + "..."})
                        pbar.update(1)
                    except Exception as e:
                        project = future_to_project[future]
                        print(f"\n‚ùå Erreur {project.name}: {str(e)}")
                        pbar.update(1)
    
    print(f"\nüìÑ Export CSV sauvegard√©: {filename} ({processed}/{total_projects} projets)")

def export_to_csv(metrics, filename=None):
    """Exporte les m√©triques vers un fichier CSV (version classique)."""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"nexus_quality_metrics_{timestamp}.csv"
    
    headers = [
        'Projet', 'Cl√©', 'Quality Gate', 'Couverture', 'Duplication',
        'Maintenabilit√©', 'Fiabilit√©', 'S√©curit√©', 'Vuln√©rabilit√©s',
        'Bugs', 'Code Smells', 'Dette technique', 'Lignes de code',
        'Derni√®re analyse'
    ]
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile, delimiter=';')
        writer.writerow(headers)
        
        for metric in metrics:
            row = [
                metric.project_name,
                metric.project_key,
                metric.quality_gate_status,
                metric.coverage or '',
                metric.duplicated_lines_density or '',
                SonarQubeService.get_rating_label(metric.maintainability_rating),
                SonarQubeService.get_rating_label(metric.reliability_rating),
                SonarQubeService.get_rating_label(metric.security_rating),
                metric.vulnerabilities or '',
                metric.bugs or '',
                metric.code_smells or '',
                SonarQubeService.format_technical_debt(metric.technical_debt),
                metric.lines_of_code or '',
                metric.last_analysis_date or ''
            ]
            writer.writerow(row)
    
    print(f"üìÑ Export CSV sauvegard√©: {filename}")


def export_to_json(metrics, filename=None):
    """Exporte les m√©triques vers un fichier JSON."""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"nexus_quality_metrics_{timestamp}.json"
    
    # Conversion en dictionnaire pour la s√©rialisation JSON
    metrics_dict = []
    for metric in metrics:
        metric_dict = {
            'projectKey': metric.project_key,
            'projectName': metric.project_name,
            'qualityGateStatus': metric.quality_gate_status,
            'coverage': metric.coverage,
            'duplicatedLinesDensity': metric.duplicated_lines_density,
            'maintainabilityRating': metric.maintainability_rating,
            'reliabilityRating': metric.reliability_rating,
            'securityRating': metric.security_rating,
            'vulnerabilities': metric.vulnerabilities,
            'bugs': metric.bugs,
            'codeSmells': metric.code_smells,
            'technicalDebt': metric.technical_debt,
            'linesOfCode': metric.lines_of_code,
            'lastAnalysisDate': metric.last_analysis_date
        }
        metrics_dict.append(metric_dict)
    
    with open(filename, 'w', encoding='utf-8') as jsonfile:
        json.dump(metrics_dict, jsonfile, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Export JSON sauvegard√©: {filename}")


def export_classification_to_csv(classification: ProjectClassification, filename: str = None) -> None:
    """
    Exporte la classification des projets au format CSV.
    
    Args:
        classification: Classification des projets √† exporter
        filename: Nom du fichier de sortie (optionnel)
    """
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"sonarqube_classification_{timestamp}.csv"
    
    # Combiner tous les projets
    all_projects = classification.active_projects + classification.configured_inactive_projects
    
    headers = [
        'Projet', 'Cl√©', 'Statut', 'Derni√®re Analyse', 'Lignes de Code',
        'Couverture (%)', 'Duplication (%)', 'Bugs', 'Vuln√©rabilit√©s', 
        'Code Smells', 'Analyse R√©cente', 'A des M√©triques'
    ]
    
    try:
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(headers)
            
            for project in all_projects:
                # Formatter la date
                last_analysis = 'Jamais'
                if project.last_analysis_date:
                    try:
                        date_obj = datetime.fromisoformat(
                            project.last_analysis_date.replace('Z', '+00:00').replace('+0000', '+00:00')
                        )
                        last_analysis = date_obj.strftime("%Y-%m-%d")
                    except ValueError:
                        last_analysis = project.last_analysis_date
                
                # D√©terminer le statut en fran√ßais
                status_fr = 'Actif' if project.status == 'active' else 'Configur√© mais Inactif'
                
                row = [
                    project.project_name,
                    project.project_key,
                    status_fr,
                    last_analysis,
                    project.lines_of_code or 0,
                    f"{project.coverage:.1f}" if project.coverage is not None else 'N/A',
                    f"{project.duplicated_lines_percent:.1f}" if project.duplicated_lines_percent is not None else 'N/A',
                    project.bugs or 0,
                    project.vulnerabilities or 0,
                    project.code_smells or 0,
                    'Oui' if project.has_recent_analysis else 'Non',
                    'Oui' if project.has_metrics else 'Non'
                ]
                writer.writerow(row)
        
        print(f"üìÑ Classification export√©e vers: {filename}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export CSV de la classification: {e}")

def export_classification_to_json(classification: ProjectClassification, filename: str = None) -> None:
    """
    Exporte la classification des projets au format JSON.
    
    Args:
        classification: Classification des projets √† exporter
        filename: Nom du fichier de sortie (optionnel)
    """
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"sonarqube_classification_{timestamp}.json"
    
    try:
        # Convertir en dictionnaire pour la s√©rialisation JSON
        data = {
            'metadata': {
                'export_date': datetime.now().isoformat(),
                'total_projects': classification.total,
                'active_projects': classification.active,
                'configured_inactive_projects': classification.configured_inactive,
                'active_percentage': round((classification.active / classification.total) * 100, 1) if classification.total > 0 else 0
            },
            'active_projects': [
                {
                    'project_key': p.project_key,
                    'project_name': p.project_name,
                    'last_analysis_date': p.last_analysis_date,
                    'lines_of_code': p.lines_of_code,
                    'coverage': p.coverage,
                    'duplicated_lines_percent': p.duplicated_lines_percent,
                    'bugs': p.bugs,
                    'vulnerabilities': p.vulnerabilities,
                    'code_smells': p.code_smells,
                    'has_recent_analysis': p.has_recent_analysis,
                    'has_metrics': p.has_metrics,
                    'status': p.status
                }
                for p in classification.active_projects
            ],
            'configured_inactive_projects': [
                {
                    'project_key': p.project_key,
                    'project_name': p.project_name,
                    'last_analysis_date': p.last_analysis_date,
                    'lines_of_code': p.lines_of_code,
                    'coverage': p.coverage,
                    'duplicated_lines_percent': p.duplicated_lines_percent,
                    'bugs': p.bugs,
                    'vulnerabilities': p.vulnerabilities,
                    'code_smells': p.code_smells,
                    'has_recent_analysis': p.has_recent_analysis,
                    'has_metrics': p.has_metrics,
                    'status': p.status
                }
                for p in classification.configured_inactive_projects
            ]
        }
        
        with open(filename, 'w', encoding='utf-8') as jsonfile:
            json.dump(data, jsonfile, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Classification export√©e vers: {filename}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export JSON de la classification: {e}")

def print_classification_stats(classification: ProjectClassification) -> None:
    """
    Affiche les statistiques de classification des projets.
    
    Args:
        classification: Classification des projets
    """
    print("\n" + "="*60)
    print("üìä STATISTIQUES DE CLASSIFICATION DES PROJETS")
    print("="*60)
    
    total = classification.total
    active = classification.active
    inactive = classification.configured_inactive
    
    print(f"üìÅ Total des projets SonarQube: {total}")
    print(f"‚úÖ Projets actifs (gate SonarQube fonctionnelle): {active}")
    print(f"‚ö†Ô∏è  Projets configur√©s mais inactifs: {inactive}")
    
    if total > 0:
        active_pct = (active / total) * 100
        inactive_pct = (inactive / total) * 100
        
        print(f"\nüìà R√©partition:")
        print(f"   Actifs: {active_pct:.1f}%")
        print(f"   Inactifs: {inactive_pct:.1f}%")
        
        print(f"\nüí° Recommandations:")
        if active_pct < 50:
            print("   üî¥ Taux d'adoption faible - Consid√©rer une campagne d'activation")
        elif active_pct < 80:
            print("   üü° Taux d'adoption moyen - Identifier les projets √† r√©activer")
        else:
            print("   üü¢ Excellent taux d'adoption SonarQube!")
    
    print("="*60)

def configure_sonar():
    """Configure la connexion SonarQube."""
    print("üîß Configuration SonarQube")
    url = input("URL SonarQube: ").strip()
    token = input("Token d'authentification: ").strip()
    
    service = SonarQubeService()
    config = SonarQubeConfig(url=url, token=token)
    service.save_config(config)
    
    # Test de la connexion
    success, error = service.test_connection()
    if success:
        print("‚úÖ Connexion r√©ussie!")
        return service
    else:
        print(f"‚ùå √âchec de la connexion: {error}")
        return None


def main():
    """Fonction principale du script."""
    parser = argparse.ArgumentParser(
        description='Extracteur de m√©triques de qualit√© SonarQube',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:

  # Configuration initiale
  python main.py --configure

  # Test de connexion
  python main.py --test-connection

  # Extraction des m√©triques de qualit√© (mode classique)
  python main.py --export-csv metrics.csv --export-json metrics.json

  # Classification des projets (nouveau)
  python main.py --classify --export-classification-csv classification.csv

  # Classification avec export JSON
  python main.py --classify --export-classification-json classification.json

  # Classification compl√®te avec tous les exports
  python main.py --classify --export-classification-csv --export-classification-json

CLASSIFICATION DES PROJETS:
  La fonctionnalit√© de classification distingue:
  
  ‚Ä¢ PROJETS ACTIFS: Analyse r√©cente (< 30 jours) + m√©triques pr√©sentes
    ‚Üí Projets avec pipeline SonarQube fonctionnel
    
  ‚Ä¢ PROJETS CONFIGUR√âS INACTIFS: Analyse ancienne ou m√©triques vides
    ‚Üí Projets connect√©s mais sans gate SonarQube active
    
  Utilisez cette classification pour identifier les projets √† r√©activer
  et mesurer le taux d'adoption SonarQube dans votre organisation.
        """
    )
    
    parser.add_argument('--configure', action='store_true', help='Configure la connexion SonarQube')
    parser.add_argument('--test-connection', action='store_true', help='Teste la connexion SonarQube')
    parser.add_argument('--export-csv', nargs='?', const=True, help='Export CSV des m√©triques (fichier optionnel)')
    parser.add_argument('--export-json', nargs='?', const=True, help='Export JSON des m√©triques (fichier optionnel)')
    
    # Nouveaux arguments pour la classification
    parser.add_argument('--classify', action='store_true', help='Classification des projets selon leur int√©gration SonarQube')
    parser.add_argument('--export-classification-csv', nargs='?', const=True, help='Export CSV de la classification (fichier optionnel)')
    parser.add_argument('--export-classification-json', nargs='?', const=True, help='Export JSON de la classification (fichier optionnel)')
    
    args = parser.parse_args()
    
    service = SonarQubeService()
    
    # Configuration
    if args.configure:
        service = configure_sonar()
        if not service:
            return 1
    
    # V√©rification de la configuration
    if not service.get_config():
        print("‚ùå Aucune configuration trouv√©e. Utilisez --configure pour configurer SonarQube.")
        return 1
    
    # Test de connexion
    if args.test_connection:
        success, error = service.test_connection()
        if success:
            print("‚úÖ Connexion SonarQube r√©ussie!")
        else:
            print(f"‚ùå √âchec de la connexion: {error}")
        return 0 if success else 1
    
    # Mode classification des projets
    if args.classify:
        print("üîç Classification des projets selon leur int√©gration SonarQube...")
        success, classification, error = service.classify_projects()
        
        if not success:
            print(f"‚ùå Erreur lors de la classification: {error}")
            return 1
        
        if not classification:
            print("‚ö†Ô∏è  Aucun projet trouv√© pour la classification.")
            return 0
        
        # Affichage des statistiques de classification
        print_classification_stats(classification)
        
        # Exports de la classification
        if args.export_classification_csv:
            filename = args.export_classification_csv if isinstance(args.export_classification_csv, str) else None
            export_classification_to_csv(classification, filename)
        
        if args.export_classification_json:
            filename = args.export_classification_json if isinstance(args.export_classification_json, str) else None
            export_classification_to_json(classification, filename)
        
        # Export par d√©faut si aucun export sp√©cifi√©
        if not args.export_classification_csv and not args.export_classification_json:
            export_classification_to_csv(classification)
            export_classification_to_json(classification)
        
        print("‚úÖ Classification termin√©e avec succ√®s!")
        return 0
    
    # Mode classique - Optimis√© pour performance
    
    # Choix du mode selon le nombre de projets
    print("üîç R√©cup√©ration de la liste des projets...")
    success, projects, error = service.get_all_projects()
    
    if not success:
        print(f"‚ùå Erreur: {error}")
        return 1
    
    if not projects:
        print("‚ö†Ô∏è  Aucun projet trouv√©.")
        return 0
    
    project_count = len(projects)
    print(f"üìä {project_count} projets d√©tect√©s")
    
    # Mode optimis√© pour grands volumes (>50 projets)
    if project_count > 50:
        print("üöÄ Mode haute performance activ√© (export incr√©mental)")
        
        # Export CSV incr√©mental si demand√©
        if args.export_csv:
            filename = args.export_csv if isinstance(args.export_csv, str) else None
            export_to_csv_incremental(service, projects, filename)
        
        # Pour JSON, r√©cup√©ration classique (plus rapide)
        if args.export_json or (not args.export_csv and not args.export_json):
            print("\nüîç R√©cup√©ration des m√©triques pour export JSON...")
            success, metrics, error = service.get_all_projects_quality_metrics()
            
            if success and metrics:
                print_stats(metrics)
                
                if args.export_json:
                    filename = args.export_json if isinstance(args.export_json, str) else None
                    export_to_json(metrics, filename)
                
                # Export par d√©faut si aucun export sp√©cifi√©
                if not args.export_csv and not args.export_json:
                    export_to_json(metrics)
    
    else:
        # Mode classique pour petits volumes
        print("üìä Mode classique activ√©")
        success, metrics, error = service.get_all_projects_quality_metrics()
        
        if not success:
            print(f"‚ùå Erreur: {error}")
            return 1
        
        if not metrics:
            print("‚ö†Ô∏è  Aucune m√©trique trouv√©e.")
            return 0
        
        # Affichage des statistiques
        print_stats(metrics)
        
        # Exports
        if args.export_csv:
            filename = args.export_csv if isinstance(args.export_csv, str) else None
            export_to_csv(metrics, filename)
        
        if args.export_json:
            filename = args.export_json if isinstance(args.export_json, str) else None
            export_to_json(metrics, filename)
        
        # Export par d√©faut si aucun export sp√©cifi√©
        if not args.export_csv and not args.export_json:
            export_to_csv(metrics)
            export_to_json(metrics)
    
    print("‚úÖ Extraction termin√©e avec succ√®s!")
    return 0


if __name__ == "__main__":
    exit(main())
