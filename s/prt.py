"""
Service SonarQube pour extraire les m√©triques de qualit√© des projets.
"""
import json
import base64
import requests
import asyncio
import aiohttp
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime
from tqdm import tqdm


@dataclass
class SonarQubeConfig:
    """Configuration pour la connexion SonarQube."""
    url: str
    token: str
    organization: str = ""


@dataclass
class QualityGateCondition:
    """Condition d'une Quality Gate."""
    metric_key: str
    comparator: str
    period_index: Optional[int] = None
    error_threshold: Optional[str] = None
    actual_value: Optional[str] = None
    status: str = 'NONE'


@dataclass
class QualityGate:
    """Quality Gate d'un projet."""
    id: str
    name: str
    status: str
    conditions: List[QualityGateCondition]


@dataclass
class ProjectMeasure:
    """Mesure d'un projet."""
    metric: str
    value: Optional[str]
    component: str


@dataclass
class SonarProject:
    """Projet SonarQube."""
    key: str
    name: str
    qualifier: str
    visibility: str
    last_analysis_date: Optional[str] = None


@dataclass
class QualityMetrics:
    """M√©triques de qualit√© d'un projet."""
    project_key: str
    project_name: str
    quality_gate_status: str
    coverage: Optional[str] = None
    duplicated_lines_density: Optional[str] = None
    maintainability_rating: Optional[str] = None
    reliability_rating: Optional[str] = None
    security_rating: Optional[str] = None
    vulnerabilities: Optional[str] = None
    bugs: Optional[str] = None
    code_smells: Optional[str] = None
    technical_debt: Optional[str] = None
    lines_of_code: Optional[str] = None
    last_analysis_date: Optional[str] = None

@dataclass
class ProjectClassificationStatus:
    """Statut de classification d'un projet selon son int√©gration SonarQube."""
    project_key: str
    project_name: str
    last_analysis_date: Optional[str] = None
    lines_of_code: Optional[int] = None
    coverage: Optional[float] = None
    duplicated_lines_percent: Optional[float] = None
    bugs: Optional[int] = None
    vulnerabilities: Optional[int] = None
    code_smells: Optional[int] = None
    has_recent_analysis: bool = False
    has_metrics: bool = False
    status: str = 'unknown'  # 'active', 'configured_inactive', 'unknown'

@dataclass  
class ProjectClassification:
    """Classification compl√®te des projets selon leur int√©gration SonarQube."""
    total: int
    active: int
    configured_inactive: int
    active_projects: List[ProjectClassificationStatus]
    configured_inactive_projects: List[ProjectClassificationStatus]


class SonarQubeService:
    """Service pour interagir avec l'API SonarQube."""
    
    CONFIG_FILE = 'sonarqube_config.json'
    
    def __init__(self):
        self._config: Optional[SonarQubeConfig] = None
        self._load_config()
    
    def _load_config(self) -> None:
        """Charge la configuration depuis le fichier."""
        try:
            with open(self.CONFIG_FILE, 'r') as f:
                data = json.load(f)
                # Assurer la compatibilit√© avec les anciennes configs
                if 'organization' not in data:
                    data['organization'] = ""
                self._config = SonarQubeConfig(**data)
        except FileNotFoundError:
            self._config = None
    
    def save_config(self, config: SonarQubeConfig) -> None:
        """Sauvegarde la configuration."""
        self._config = config
        with open(self.CONFIG_FILE, 'w') as f:
            json.dump({
                'url': config.url,
                'token': config.token,
                'organization': config.organization
            }, f, indent=2)
    
    def get_config(self) -> Optional[SonarQubeConfig]:
        """Retourne la configuration actuelle."""
        return self._config
    
    def _get_auth_headers(self) -> Dict[str, str]:
        """G√©n√®re les headers d'authentification."""
        if not self._config:
            raise ValueError("Configuration non trouv√©e")
        
        # Nettoyer l'URL (enlever le trailing slash)
        self._config.url = self._config.url.rstrip('/')
        
        token_bytes = f"{self._config.token}:".encode('utf-8')
        token_b64 = base64.b64encode(token_bytes).decode('utf-8')
        
        headers = {
            'Authorization': f'Basic {token_b64}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        return headers
    
    def test_connection(self) -> Tuple[bool, Optional[str]]:
        """Teste la connexion √† SonarQube."""
        if not self._config:
            return False, "Configuration non trouv√©e"
        
        try:
            print(f"üîó Test de connexion vers: {self._config.url}")
            print(f"üîë Token utilis√©: {self._config.token[:8]}...")
            
            response = requests.get(
                f"{self._config.url}/api/system/status",
                headers=self._get_auth_headers(),
                timeout=30
            )
            
            print(f"üì° Code de r√©ponse: {response.status_code}")
            
            if not response.ok:
                error_msg = f"HTTP {response.status_code}: {response.reason}"
                try:
                    error_detail = response.text
                    if error_detail:
                        error_msg += f"\nD√©tail: {error_detail}"
                except:
                    pass
                return False, error_msg
            
            data = response.json()
            if data.get('status') == 'UP':
                return True, None
            else:
                return False, f"SonarQube status: {data.get('status')}"
                
        except requests.exceptions.RequestException as e:
            return False, f"Erreur de connexion: {str(e)}"
    
    def get_all_projects(self) -> Tuple[bool, Optional[List[SonarProject]], Optional[str]]:
        """R√©cup√®re tous les projets SonarQube."""
        if not self._config:
            return False, None, "Configuration non trouv√©e"
        
        try:
            url = f"{self._config.url}/api/projects/search"
            params = {'ps': '500'}
            if self._config.organization:
                params['organization'] = self._config.organization
                
            print(f"üîç R√©cup√©ration des projets: {url}")
            print(f"üìã Param√®tres: {params}")
            
            response = requests.get(
                url,
                headers=self._get_auth_headers(),
                params=params,
                timeout=30
            )
            
            print(f"üì° Code de r√©ponse projets: {response.status_code}")
            
            if not response.ok:
                error_msg = f"HTTP {response.status_code}: {response.reason}"
                try:
                    error_detail = response.text
                    if error_detail:
                        error_msg += f"\nD√©tail: {error_detail}"
                        print(f"‚ùå Erreur d√©taill√©e: {error_detail}")
                except:
                    pass
                return False, None, error_msg
            
            data = response.json()
            projects = []
            
            for component in data.get('components', []):
                project = SonarProject(
                    key=component['key'],
                    name=component['name'],
                    qualifier=component['qualifier'],
                    visibility=component['visibility'],
                    last_analysis_date=component.get('lastAnalysisDate')
                )
                projects.append(project)
            
            print(f"‚úÖ {len(projects)} projets trouv√©s")
            return True, projects, None
            
        except requests.exceptions.RequestException as e:
            return False, None, f"Erreur lors de la r√©cup√©ration des projets: {str(e)}"
    
    def get_project_quality_gate(self, project_key: str) -> Optional[QualityGate]:
        """R√©cup√®re la Quality Gate d'un projet."""
        if not self._config:
            return None
        
        try:
            params = {'projectKey': project_key}
            if self._config.organization:
                params['organization'] = self._config.organization
                
            response = requests.get(
                f"{self._config.url}/api/qualitygates/project_status",
                params=params,
                headers=self._get_auth_headers(),
                timeout=30
            )
            
            if not response.ok:
                return None
            
            data = response.json()
            project_status = data.get('projectStatus')
            
            if not project_status:
                return None
            
            conditions = []
            for condition in project_status.get('conditions', []):
                qg_condition = QualityGateCondition(
                    metric_key=condition['metricKey'],
                    comparator=condition['comparator'],
                    period_index=condition.get('periodIndex'),
                    error_threshold=condition.get('errorThreshold'),
                    actual_value=condition.get('actualValue'),
                    status=condition['status']
                )
                conditions.append(qg_condition)
            
            return QualityGate(
                id=project_status.get('id', ''),
                name=project_status.get('name', ''),
                status=project_status['status'],
                conditions=conditions
            )
            
        except requests.exceptions.RequestException as e:
            print(f"Erreur lors de la r√©cup√©ration de la Quality Gate pour {project_key}: {e}")
            return None
    
    def get_project_measures(self, project_key: str) -> List[ProjectMeasure]:
        """R√©cup√®re les mesures d'un projet."""
        if not self._config:
            return []
        
        metrics = [
            'coverage',
            'duplicated_lines_density',
            'sqale_rating',  # Chang√© de maintainability_rating
            'reliability_rating',
            'security_rating',
            'vulnerabilities',
            'bugs',
            'code_smells',
            'sqale_index',
            'ncloc'
        ]
        
        try:
            params = {
                'component': project_key,
                'metricKeys': ','.join(metrics)
            }
            if self._config.organization:
                params['organization'] = self._config.organization
                
            response = requests.get(
                f"{self._config.url}/api/measures/component",
                params=params,
                headers=self._get_auth_headers(),
                timeout=30
            )
            
            print(f"   üìè Mesures - Code: {response.status_code}")
            
            if not response.ok:
                print(f"   ‚ùå Erreur mesures: {response.status_code} - {response.text[:200]}")
                return []
            
            data = response.json()
            print(f"   üìä Mesures trouv√©es: {len(data.get('component', {}).get('measures', []))}")
            measures = []
            
            for measure in data.get('component', {}).get('measures', []):
                project_measure = ProjectMeasure(
                    metric=measure['metric'],
                    value=measure.get('value'),
                    component=project_key
                )
                measures.append(project_measure)
            
            return measures
            
        except requests.exceptions.RequestException as e:
            print(f"Erreur lors de la r√©cup√©ration des mesures pour {project_key}: {e}")
            return []
    
    def get_project_quality_metrics_safe(self, project: SonarProject) -> Optional[QualityMetrics]:
        """R√©cup√®re les m√©triques d'un seul projet de mani√®re s√©curis√©e."""
        try:
            quality_gate = self.get_project_quality_gate(project.key)
            measures = self.get_project_measures(project.key)
            
            measure_map = {m.metric: m.value for m in measures}
            
            metrics = QualityMetrics(
                project_key=project.key,
                project_name=project.name,
                quality_gate_status=quality_gate.status if quality_gate else 'NONE',
                coverage=measure_map.get('coverage'),
                duplicated_lines_density=measure_map.get('duplicated_lines_density'),
                maintainability_rating=measure_map.get('sqale_rating'),
                reliability_rating=measure_map.get('reliability_rating'),
                security_rating=measure_map.get('security_rating'),
                vulnerabilities=measure_map.get('vulnerabilities'),
                bugs=measure_map.get('bugs'),
                code_smells=measure_map.get('code_smells'),
                technical_debt=measure_map.get('sqale_index'),
                lines_of_code=measure_map.get('ncloc'),
                last_analysis_date=project.last_analysis_date
            )
            
            return metrics
            
        except Exception as e:
            print(f"   ‚ùå √âchec {project.name}: {str(e)}")
            return None

    def get_all_projects_quality_metrics(self) -> Tuple[bool, Optional[List[QualityMetrics]], Optional[str]]:
        """R√©cup√®re les m√©triques de qualit√© de tous les projets avec parall√©lisation."""
        success, projects, error = self.get_all_projects()
        if not success or not projects:
            return success, None, error
        
        quality_metrics = []
        total_projects = len(projects)
        
        print(f"üöÄ Analyse de {total_projects} projets (parall√©lis√©e)...")
        
        # Parall√©lisation avec ThreadPoolExecutor
        with ThreadPoolExecutor(max_workers=10) as executor:
            # Cr√©er la barre de progression
            with tqdm(total=total_projects, desc="Projets analys√©s", 
                     bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:
                
                # Soumettre tous les projets
                future_to_project = {
                    executor.submit(self.get_project_quality_metrics_safe, project): project 
                    for project in projects
                }
                
                # R√©cup√©rer les r√©sultats au fur et √† mesure
                for future in future_to_project:
                    try:
                        metrics = future.result(timeout=60)  # 60s timeout par projet
                        if metrics:
                            quality_metrics.append(metrics)
                            pbar.set_postfix({"Derni√®re": metrics.project_name[:20] + "..."})
                        pbar.update(1)
                    except Exception as e:
                        project = future_to_project[future]
                        print(f"\n‚ùå Timeout/erreur {project.name}: {str(e)}")
                        pbar.update(1)
        
        print(f"\n‚úÖ {len(quality_metrics)}/{total_projects} projets analys√©s avec succ√®s")
        return True, quality_metrics, None
    
    @staticmethod
    def format_technical_debt(minutes: Optional[str]) -> str:
        """Formate la dette technique en jours et heures."""
        if not minutes:
            return 'N/A'
        
        try:
            total_minutes = int(minutes)
            days = total_minutes // (8 * 60)
            hours = (total_minutes % (8 * 60)) // 60
            
            if days > 0:
                return f"{days}j {hours}h"
            else:
                return f"{hours}h"
        except ValueError:
            return 'N/A'
    
    @staticmethod
    def get_rating_label(rating: Optional[str]) -> str:
        """Convertit une note num√©rique en lettre."""
        if not rating:
            return 'N/A'
        
        ratings = {'1': 'A', '2': 'B', '3': 'C', '4': 'D', '5': 'E'}
        return ratings.get(rating, rating)
    
    def classify_projects(self) -> Tuple[bool, Optional[ProjectClassification], Optional[str]]:
        """
        Classifie tous les projets selon leur statut d'int√©gration SonarQube.
        
        CLASSIFICATION LOGIQUE :
        
        1. PROJETS ACTIFS (status: 'active') :
           - Analyse r√©cente (< 30 jours)
           - ET m√©triques pr√©sentes (lines of code > 0)
           - ET donn√©es de qualit√© disponibles
           ‚Üí Projets avec pipeline SonarQube fonctionnel
        
        2. PROJETS CONFIGUR√âS MAIS INACTIFS (status: 'configured_inactive') :
           - Projet pr√©sent dans SonarQube
           - MAIS analyse ancienne (> 30 jours) ou absente
           - OU m√©triques vides/nulles (pas de code analys√©)
           ‚Üí Projets connect√©s mais sans gate SonarQube active
        
        UTILISATION POUR ANALYSE :
        - Export CSV : Colonne 'status' permet le filtrage
        - Graphiques : Ratio projets actifs vs configur√©s
        - Actions : Identifier les projets √† r√©activer
        
        Returns:
            Tuple[bool, Optional[ProjectClassification], Optional[str]]: 
            (succ√®s, classification, erreur)
        """
        if not self._config:
            return False, None, "Configuration SonarQube non trouv√©e"
        
        try:
            print("üîç R√©cup√©ration de tous les projets...")
            success, projects, error = self.get_all_projects()
            
            if not success or not projects:
                return False, None, error or "Impossible de r√©cup√©rer les projets"
            
            print(f"üìä Classification de {len(projects)} projets...")
            
            active_projects = []
            configured_inactive_projects = []
            
            # Date limite pour consid√©rer une analyse comme r√©cente (30 jours)
            from datetime import datetime, timedelta
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            # Classification en parall√®le pour optimiser la performance
            def classify_single_project(project):
                """Classifie un projet unique."""
                try:
                    # R√©cup√©rer les m√©triques du projet
                    measures = self.get_project_measures(project.key)
                    
                    # Cr√©er un dictionnaire des mesures
                    measure_map = {m.metric: m.value for m in measures}
                    
                    # Extraire les donn√©es
                    lines_of_code = measure_map.get('ncloc')
                    coverage = measure_map.get('coverage')
                    duplicated_lines = measure_map.get('duplicated_lines_density')
                    bugs = measure_map.get('bugs')
                    vulnerabilities = measure_map.get('vulnerabilities')
                    code_smells = measure_map.get('code_smells')
                    
                    # Convertir en types appropri√©s
                    lines_of_code_int = int(lines_of_code) if lines_of_code and lines_of_code.isdigit() else 0
                    coverage_float = float(coverage) if coverage else None
                    duplicated_lines_float = float(duplicated_lines) if duplicated_lines else None
                    bugs_int = int(bugs) if bugs and bugs.isdigit() else 0
                     vulnerabilities_int = int(vulnerabilities) if vulnerabilities and vulnerabilities.isdigit() else 0
                     code_smells_int = int(code_smells) if code_smells and code_smells.isdigit() else 0
                     
                     # V√©rifier si l'analyse est r√©cente
                     has_recent_analysis = False
                     if project.last_analysis_date:
                         try:
                             # Format attendu: "2024-01-15T10:30:45+0000"
                             analysis_date = datetime.fromisoformat(
                                 project.last_analysis_date.replace('Z', '+00:00').replace('+0000', '+00:00')
                             )
                             has_recent_analysis = analysis_date > thirty_days_ago
                         except ValueError:
                             # Si le parsing √©choue, consid√©rer comme ancienne
                             has_recent_analysis = False
                     
                     # V√©rifier si le projet a des m√©triques significatives
                     has_metrics = lines_of_code_int > 0
                     
                     # D√©terminer le statut
                     if has_recent_analysis and has_metrics:
                         status = 'active'
                     else:
                         status = 'configured_inactive'
                     
                     # Cr√©er l'objet de classification
                     classification_status = ProjectClassificationStatus(
                         project_key=project.key,
                         project_name=project.name,
                         last_analysis_date=project.last_analysis_date,
                         lines_of_code=lines_of_code_int,
                         coverage=coverage_float,
                         duplicated_lines_percent=duplicated_lines_float,
                         bugs=bugs_int,
                         vulnerabilities=vulnerabilities_int,
                         code_smells=code_smells_int,
                         has_recent_analysis=has_recent_analysis,
                         has_metrics=has_metrics,
                         status=status
                     )
                     
                     return classification_status
                     
                 except Exception as e:
                     print(f"   ‚ùå Erreur lors de l'analyse: {str(e)}")
                     # Retourner un statut inactif par d√©faut
                     return ProjectClassificationStatus(
                         project_key=project.key,
                         project_name=project.name,
                         status='configured_inactive'
                     )
            
            # Ex√©cution parall√®le de la classification
            with ThreadPoolExecutor(max_workers=10) as executor:
                with tqdm(total=len(projects), desc="Classification en cours", 
                         bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:
                    
                    # Soumettre tous les projets
                    future_to_project = {
                        executor.submit(classify_single_project, project): project 
                        for project in projects
                    }
                    
                    # R√©cup√©rer les r√©sultats au fur et √† mesure
                    for future in future_to_project:
                        try:
                            classification_status = future.result(timeout=60)
                            if classification_status:
                                if classification_status.status == 'active':
                                    active_projects.append(classification_status)
                                    pbar.set_postfix({"Type": "Actif", "Nom": classification_status.project_name[:15] + "..."})
                                else:
                                    configured_inactive_projects.append(classification_status)
                                    pbar.set_postfix({"Type": "Inactif", "Nom": classification_status.project_name[:15] + "..."})
                            pbar.update(1)
                        except Exception as e:
                            project = future_to_project[future]
                            print(f"\n‚ùå Timeout/erreur classification {project.name}: {str(e)}")
                            # Ajouter dans les inactifs par d√©faut
                            classification_status = ProjectClassificationStatus(
                                project_key=project.key,
                                project_name=project.name,
                                status='configured_inactive'
                            )
                            configured_inactive_projects.append(classification_status)
                            pbar.update(1)
            
            # Cr√©er la classification finale
            classification = ProjectClassification(
                total=len(projects),
                active=len(active_projects),
                configured_inactive=len(configured_inactive_projects),
                active_projects=active_projects,
                configured_inactive_projects=configured_inactive_projects
            )
            
            print(f"\nüìä Classification termin√©e:")
            print(f"   Total: {classification.total} projets")
            print(f"   Actifs: {classification.active} projets ({(classification.active/classification.total*100):.1f}%)")
            print(f"   Configur√©s inactifs: {classification.configured_inactive} projets ({(classification.configured_inactive/classification.total*100):.1f}%)")
            
            return True, classification, None
            
        except Exception as e:
            return False, None, f"Erreur lors de la classification: {str(e)}"
