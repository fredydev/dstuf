# üìñ Documentation Technique ‚Äì T√¢che Azure DevOps ‚Äì SnapLogic Graduation

---

## 1. Introduction & Vue d‚Äôensemble

Cette t√¢che personnalis√©e Azure DevOps a √©t√© d√©velopp√©e exclusivement pour automatiser le d√©clenchement de d√©ploiements sur la plateforme SnapLogic, via son API REST s√©curis√©e.

**Tout le design du projet (client TypeScript g√©n√©r√© √† partir du contrat OpenAPI, gestion du token OIDC, logique des inputs, etc.) est enti√®rement orient√© SnapLogic.**

La t√¢che g√®re‚ÄØ:
- L‚Äôauthentification OIDC et l‚Äôappel s√©curis√© de l‚ÄôAPI SnapLogic
- Le polling du statut de d√©ploiement jusqu‚Äô√† compl√©tion
- La coh√©rence stricte des environnements (DEV, QA, PROD)
- La robustesse et la tra√ßabilit√© des actions dans le pipeline

**Technologies principales‚ÄØ:**
- TypeScript, Node.js, Azure DevOps, OpenAPI, Service Connection OIDC/custom

---

## 2. Architecture & Flux global

```
[Pipeline Azure DevOps]
      |
      v
[T√¢che custom TypeScript]
      |
      v
[Client g√©n√©r√© OpenAPI]
      |
      v
[API REST SnapLogic]
```

---

## 3. G√©n√©ration et gestion du client OpenAPI

- Le contrat OpenAPI fourni par SnapLogic est la seule source de v√©rit√© pour l‚Äôinterface technique.
- √Ä chaque build, le client TypeScript est r√©g√©n√©r√© automatiquement (voir section build).
- Aucune modification manuelle du code g√©n√©r√© n‚Äôest autoris√©e.

---

## 4. Architecture du Projet

```
custom-task/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ GraduationTask.ts         # Logique principale de la t√¢che
‚îÇ   ‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/                  # Client OpenAPI g√©n√©r√© (GraduationApi, Status, etc.)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ model/
‚îÇ   ‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ task.test.ts          # Tests unitaires
‚îÇ   ‚îú‚îÄ‚îÄ task.json                 # D√©claration de la t√¢che Azure DevOps
‚îÇ   ‚îú‚îÄ‚îÄ README.md                 # Documentation utilisateur
‚îÇ   ‚îî‚îÄ‚îÄ openapi.yaml              # Contrat OpenAPI SnapLogic
‚îú‚îÄ‚îÄ dist/                         # JS compil√© pour ex√©cution
‚îú‚îÄ‚îÄ package.json                  # D√©pendances et scripts
‚îú‚îÄ‚îÄ tsconfig.json                 # Configuration TypeScript
‚îî‚îÄ‚îÄ .eslintrc.json                # Linting
```

---

## 3. Fonctionnement de la T√¢che

### Entr√©es principales (`task.json`)

- `source`‚ÄØ: nom du projet source √† d√©ployer (ex‚ÄØ: `ipaas`)
- `destination`‚ÄØ: environnement cible (ex‚ÄØ: `ipaas.dev1`, `ipaas.cr1`, `ipaas.pr1`)
- `entityEndpoint`‚ÄØ: nom de la Service Connection Azure DevOps √† utiliser. Ce param√®tre est central‚ÄØ: la t√¢che l‚Äôutilise pour‚ÄØ:
    - G√©n√©rer dynamiquement le token OIDC n√©cessaire √† l‚Äôauthentification SnapLogic
    - R√©cup√©rer dynamiquement l‚ÄôURL cible de l‚ÄôAPI SnapLogic (l‚ÄôURL est stock√©e dans la Service Connection)
    - **Note :** Pour QA et PP, la m√™me URL de graduation SnapLogic est utilis√©e (mais chaque env a sa propre SC). PR utilise une URL diff√©rente et sa propre SC.

> **Remarque :** Les Service Connections utilis√©es doivent √™tre de **type custom** (Azure DevOps). Pour la proc√©dure de cr√©ation/configuration, voir la page interne ¬´¬†url¬†¬ª.

**Variables pipeline utilis√©es**‚ÄØ:
- `SYSTEM_TEAMPROJECT`, `SYSTEM_TEAMFOUNDATIONCOLLECTIONURI`, `BUILD_BUILDID`, `BUILD_REQUESTEDFOREMAIL` (pour le contexte release)

### √âtapes principales

1. **R√©cup√©ration des inputs et variables**
2. **V√©rification de la coh√©rence environnementale**  
   (destination, URL et Service Connection doivent cibler le m√™me env)
3. **Initialisation du client SnapLogic (OpenAPI)**
4. **Injection du token OIDC dans le client**
5. **Appel de l‚ÄôAPI SnapLogic pour d√©clencher le d√©ploiement**
6. **Polling du statut du d√©ploiement (toutes les 3s)**
7. **Logging du statut √† chaque it√©ration (mode debug recommand√©)**
8. **Gestion des statuts de retour (success, failed, running)**
9. **Gestion des erreurs et logs d√©taill√©s**

---

## 4. S√©curit√©

- **Authentification**‚ÄØ:  
  Utilisation d‚Äôun token OIDC fourni par une Service Connection Azure DevOps de type ‚ÄúGeneric‚Äù ou ‚ÄúOIDC‚Äù.
- **S√©paration stricte des environnements**‚ÄØ:  
  La t√¢che v√©rifie que la SC, l‚ÄôURL et le param√®tre `destination` correspondent au m√™me environnement (dev, cr, prd).
- **Gestion des secrets**‚ÄØ:  
  Le token n‚Äôest jamais loggu√© en clair. Les inputs secrets sont marqu√©s `isSecret` dans `task.json`.
- **Protection contre les erreurs de configuration**‚ÄØ:  
  La t√¢che √©choue explicitement si une incoh√©rence est d√©tect√©e (ex‚ÄØ: SC prod sur env dev).

---

## 5. D√©veloppement

### Langages et outils

- TypeScript (target ES2020+)
- Node.js 16+ (ex√©cution sur agent Ubuntu-latest)
- Client OpenAPI g√©n√©r√© via‚ÄØ:
  ```sh
  npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g typescript-node -o src/client --additional-properties=useSingleRequestParameter=true,typescriptThreePlus=true
  ```
- Linting via ESLint (`npm run lint`)
- Tests unitaires via Mocha/Chai (`npm test`)

### Principaux fichiers

- `GraduationTask.ts`‚ÄØ: logique de la t√¢che, gestion du polling, des erreurs, des statuts et de la s√©curit√©.
- `client/api/graduationApi.ts`‚ÄØ: client g√©n√©r√©, m√©thodes `deploy`, `getStatusById`, injection du token via `accessToken`.
- `test/task.test.ts`‚ÄØ: tests unitaires avec mocks du client g√©n√©r√©.

### Gestion des d√©pendances

- D√©pendances Node.js‚ÄØ: `azure-devops-node-api`, `azure-pipelines-task-lib`, `request`, etc.
- Toutes les d√©pendances sont list√©es dans `package.json`.

---

## 6. D√©ploiement et Packaging

### Compilation

- Compile le code TypeScript en JavaScript avant publication‚ÄØ:
  ```sh
  npm run build
  ```
- Le JS compil√© est plac√© dans `dist/`.

### Packaging

- Le package de la t√¢che doit contenir‚ÄØ:
  - JS compil√© (`dist/`)
  - `task.json`
  - `node_modules` (ou les d√©pendances n√©cessaires)
  - Client OpenAPI g√©n√©r√© (ne jamais √©diter manuellement)
- Utilisation de `tfx` pour packager et publier la t√¢che sur Azure DevOps.

### Publication

- Publier la t√¢che sur l‚Äôorganisation Azure DevOps via‚ÄØ:
  ```sh
  tfx build tasks upload --task-path .
  ```

---


## 8. Tests et Qualit√©

- **Tests unitaires**‚ÄØ:  
  Couvrent les cas de succ√®s, d‚Äôerreur, de polling, de gestion des statuts et de coh√©rence des inputs.
- **Linting**‚ÄØ:  
  ESLint avec configuration stricte pour garantir la coh√©rence du code.
- **Couverture**‚ÄØ:  
  Viser >70% sur la logique m√©tier critique.

---

## 9. Gestion des environnements

- **Logique de graduation multi-environnements** :
  - La t√¢che permet d‚Äôorchestrer une cha√Æne de promotions : de DV (d√©veloppement) vers QA, de QA vers PP, puis de PP vers PR.
  - Pour les environnements QA et PP, l‚ÄôURL de graduation SnapLogic est identique (m√™me endpoint), mais chaque environnement utilise sa propre Service Connection custom pour garantir l‚Äôisolation des acc√®s.
  - L‚Äôenvironnement PR (production) dispose d‚Äôune URL de graduation distincte et d‚Äôune Service Connection d√©di√©e.
- **Validation stricte** :
  - √Ä chaque ex√©cution, la t√¢che v√©rifie la coh√©rence entre l‚ÄôURL extraite de la Service Connection, la valeur de `destination` et le nom de la Service Connection.
  - Toute incoh√©rence (mauvaise URL, SC ou destination) entra√Æne un √©chec imm√©diat (‚Äúfail-fast‚Äù).

> **Remarque pour les d√©veloppeurs** :
> La logique de mapping entre environnement, Service Connection et URL est centralis√©e dans le code. Si la matrice d‚Äôenvironnements √©volue, il faudra adapter cette logique.

---

## 10. Logging et Debug

- Utiliser `tl.debug()` pour les logs d√©taill√©s.
- Activer le mode debug dans le pipeline pour voir les logs en temps r√©el‚ÄØ:
  - Ajouter la variable pipeline‚ÄØ: `System.Debug=true`
- Les logs de polling sont visibles √† chaque it√©ration en mode debug.

---

## 11. Maintenance et √©volution

- **Pour r√©g√©n√©rer le client OpenAPI**‚ÄØ:  
  Voir la commande en section d√©veloppement.  
  Ne jamais √©diter le code g√©n√©r√© √† la main.
- **Pour ajouter un nouvel environnement**‚ÄØ:  
  Ajouter la logique de d√©tection dans la fonction de coh√©rence.
- **Pour migrer vers une nouvelle version d‚ÄôAPI**‚ÄØ:  
  Mettre √† jour le fichier `openapi.yaml` et r√©g√©n√©rer le client.
- **Pour ajouter des tests**‚ÄØ:  
  Ajouter des cas dans `test/task.test.ts` en mockant le client g√©n√©r√©.

---

## 12. S√©curit√© et bonnes pratiques DevOps

- **Jamais de secrets en clair dans les logs ou le code.**
- **Respect des permissions minimales** sur les Service Connections.
- **Versioning s√©mantique** de la t√¢che (`task.json`).
- **Documentation** √† jour‚ÄØ: README et documentation technique.
- **Accessibilit√© et robustesse**‚ÄØ: gestion des erreurs explicites, messages clairs, respect des standards Azure DevOps.

---

## 13. Annexes

### Ressources utiles

- [Azure DevOps Custom Tasks](https://learn.microsoft.com/en-us/azure/devops/extend/develop/add-build-task)
- [OpenAPI Generator](https://openapi-generator.tech/)
- [azure-devops-node-api](https://github.com/microsoft/azure-devops-node-api)
- [azure-pipelines-task-lib](https://github.com/microsoft/azure-pipelines-task-lib)
- [ESLint](https://eslint.org/)
- [Mocha](https://mochajs.org/)
- [Chai](https://www.chaijs.com/)

---

## 14. Rappel technique SnapLogic

Tout le code, la g√©n√©ration du client et la gestion du token OIDC sont strictement d√©di√©s √† l‚Äôint√©gration avec SnapLogic‚ÄØ: aucun usage g√©n√©rique n‚Äôest pr√©vu.

---

## 15. Contact et support

Pour toute question technique, contacter‚ÄØ:  
- **Equipe DevOps**‚ÄØ: dev_sup_integration@zz.com

---

**Cette documentation est √† int√©grer dans le README du projet et √† maintenir √† jour √† chaque √©volution majeure.**
